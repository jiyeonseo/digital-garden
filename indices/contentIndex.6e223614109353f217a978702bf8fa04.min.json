{"/":{"title":"🪴","content":"\n기록을 합니다.\n\n","lastmodified":"2022-11-27T16:20:13.839221402Z","tags":null},"/notes/Blockchain":{"title":"Blockchain","content":"\n## Blockchain\n-   public database\n-   한 네트워크 내 여러 컴퓨터들을 통해 저장하고, 공유하는 분산형 데이터베이스\n\n## Block\n-   연속성있는 그룹(Blocks)에 저장되는 데이터(data+state)\n-   예를 들어, ETH를 전송했다면, 이 트랜잭션 데이터는 block에 저장됨\n\n## Chain\n-   각 블록은 부모 블록를 참조하고 있다. 즉, 블록들은 연결되어 있음.\n-   블록들은 연결되어 있기 때문에, 블록체인이라고 부름\n\n## Web3\n- 탈중앙화, 블록체인 기술, 토큰 기반 경제학과 같은 개념을 통합한 WWW의 새로운 아이디어\n- Web1 : read-only\n- Web2 : read-write\n- Web3 : read-write-own\n\n## Cryptocurrency\n- 중앙 기관이 아닌 암호를 사용하여 분산 시스템에서 검증 및 유지되는 디지털 통화\n- crypto-currency 혹은 crypto 라고 불린다.\n","lastmodified":"2022-11-27T16:20:13.839221402Z","tags":null},"/notes/Ethereum":{"title":"Ethereum","content":"\n## Ethereum\n- 컴퓨터가 내장된 블록체인.\n- 비트코인과 다른 점 : 암호화폐로서의 기능 뿐만 아니라 프로그래밍이 가능. 네트워크에서 분산형 애플리케이션을 구축 및 배포할 수 있음.\n- 중앙 주체의 통제 없이 앱과 조직을 구축하고, 자산을 보유하고, 거래하고 소통할 수 있음\n\n## EVM\n- Ethereum Virtual Machine\n- 글로벌 가상 컴퓨터, 모든 참여자들이 코드 실행을 요청 할 수 있고, 코드 실행은 EVM 상태를 변경시킴\n- [https://ethereum.org/ko/developers/docs/evm](https://ethereum.org/ko/developers/docs/evm)\n\n## Ether\n- ETH : native cryptocurrency of Ethereum\n- 화폐로서 사용되는 암호화폐\n- 거래 요청 확인 및 실행한 컴퓨터에 대한 보상으로 지급됨\n\n## Ethereum Classic\n- 오리지널 이더리움 네트워크 해킹을 해결하기 위해 하드포크 하기 전의 오픈소스 블록체인\n- ETC : 이더리움 클래식의 고유 통화\n\n## Smart contracts\n- 이더리움 블록체인 상에서 실행되는 프로그램\n- 이더리움 블록체인 상의 특정 주소에 있는 코드(function)과 데이터(state)의 모음\n\n### Smart contract 동작 방식\n- 네트워크 상에 미리 결정된 조건이 충족될 때 동작 실행\n\n## Minting Ether\n- 이더리움 원장(Ethereum ledger)에 새로운 이더리움을 발행하는 것\n- underlying Ethereum 만이 새로운 ether를 만들 수 있다.\n\n## Burning Ether\n- 이더리움 원장(Ethereum ledger)에서 이더리움을 삭제하는 것\n\n## Denominations of ether\n- 이더 종파\n- 이더리움에서 적은 금액으로 거래가 자주 일어나, 이를 용이하게 하기 위해 만든 단위\n- \"Wei\"와 \"Gwei\"가 가장 유명하다.\n- [https://ethereum.org/ko/developers/docs/intro-to-ether/#denominations](https://ethereum.org/ko/developers/docs/intro-to-ether/#denominations)\n\n### Wei\n- 이더(ether)의 가장 작은 단위\n- 1 wei = 10^-18 ether = 0.000000000000000001 ether\n- 1 ether = 10^18 wei = 1,000,000,000,000,000,000 wei\n- 주로 기술적 구현단에서 자주 사용됨.\n- 비트코인 탄생에 큰 영향을 준 B-Money를 고안한 인물인 [Wei Dai](https://en.wikipedia.org/wiki/Wei_Dai)의 이름을 따서 만들어졌다.\n\n### Gwei\n- giga-wei. 1,000,000,000 wei\n- Gas 이야기 할 때 많이 사용됨.\n\n## Transferring ether\n- 각 트랜잭션에는 `value` 필드 : 전송할 ether의 양(wei 단위로)\n- sender -\u003e recipient 주소로 옮겨짐\n- recipient 주소가 smart contract라면 smart contract 실행에 대한 gas fee 지불하는데 새용될 수도 있다.\n- [https://ethereum.org/ko/developers/docs/intro-to-ether/#transferring-ether](https://ethereum.org/ko/developers/docs/intro-to-ether/#transferring-ether)\n\n  \n## Ethereum accounts\n- 이더리움에서 거래할 수 있는 ether 잔고를 가지고 있는 entity\n- account은 사용자가 사용하거나 smart contract를 배포할 수 있다.\n\n## Types of Ethereum accounts\n- 1) Externally-owned account (EOA) : priveate key를 가지고 있는 계정\n- 2) Contract account : 네트워크에 배포된 smart contract.\n\n### 1) Externally-owned account (EOA)\n- 만드는데 비용이 들지 않는다.\n- 트랜잭션을 일으킬 수 있다.\n- EOA 사이에서 ETH나 토큰을 전송할 수 있다.\n- public key와 private key 암호화된 키 쌍을 가지고 있다.\n\n### 2) Contract account\n- 생성시 비용이 든다. 네트워크 스토리지를 사용하기 때문에\n- 트랜잭션 수신하는 응답으로만 트랜잭션을 보낼 수 있다. (스스로 트랜잭션을 보낼 수 없다.)\n- 외부에서 contract account로의 전송을 통해 여러 가지 작업할 수 있는 코드를 트리거링 할 수 있다. ex. 토큰 보내기 혹은 새로운 contract 만들기 등\n- private 키가 없다. 대신 code 내 로직에 의해 컨트롤 된다.\n\n\n## Ethereum accounts have four fields\n![](https://ethereum.org/static/19443ab40f108c985fb95b07bac29bcb/302a4/accounts.png)\n - [AN ACCOUNT EXAMINED](https://ethereum.org/ko/developers/docs/accounts/#an-account-examined)\n\n### nonce\n- 각 account에서 보낸 트랜잭션의 수. 트랜잭션 카운터\n- 한 트랜잭션을 한번만 처리할 수 있게 됨. replay attack 방지.\n- account 에서 생성된 contract 갯수.\n\n### balance\n- 주소가 소유한 wei의 수.\n\n### codeHash\n- EVM(이더리움 가상머신) 내 account 코드.\n- 변하지 않는 값. (다른 필드들은 변함)\n- contract account의 경우, contract의 코드를 가리킨다.\n- account가 메세지를 받게되면 코드 실행\n- 코드 조각은 나중에 검색할 수 있도록 해당 해시 아래 상태 데이터베이스(state database)에 포함됨\n- EOA의 경우, 빈 string 해시 값.\n\n### storageRoot\n- storage hash\n- account의 storage content의 해시 값.\n- default는 비어 있음.\n\n## References\n- Ethereum official website : [https://ethereum.org/ko/what-is-ethereum/](https://ethereum.org/ko/what-is-ethereum/)\n- [Learn Ethereum Blockchain daily and Keep the Knowledge Awake :)](https://medium.com/coinsbench/learn-ethereum-blockchain-daily-and-keep-the-knowledge-awake-day-1-6d482ae67ac7)\n- [Account Abstraction \u0026 ERC 4337](https://medium.com/decipher-media/account-abstraction-erc-4337-2b8dff6b0a34)","lastmodified":"2022-11-27T16:20:13.839221402Z","tags":null},"/tags/setup":{"title":"Setup","content":"\n## Making your own Quartz\nSetting up Quartz requires a basic understanding of `git`. If you are unfamiliar, [this resource](https://resources.nwplus.io/2-beginner/how-to-git-github.html) is a great place to start!\n\n### Forking\n\u003e A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\n\nNavigate to the GitHub repository for the Quartz project:\n\n📁 [Quartz Repository](https://github.com/jackyzha0/quartz)\n\nThen, Fork the repository into your own GitHub account. If you don't have an account, you can make on for free [here](https://github.com/join). More details about forking a repo can be found on [GitHub's documentation](https://docs.github.com/en/get-started/quickstart/fork-a-repo).\n\n### Cloning\nAfter you've made a fork of the repository, you need to download the files locally onto your machine. Ensure you have `git`, then type the following command replacing `YOUR-USERNAME` with your GitHub username.\n\n```shell\ngit clone https://github.com/YOUR-USERNAME/quartz\n```\n\n## Editing\nGreat! Now you have everything you need to start editing and growing your digital garden. If you're ready to start writing content already, check out the recommended flow for editing notes in Quartz.\n\n\u003e ✏️ Step 2: [Editing Notes in Quartz](notes/editing.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).","lastmodified":"2022-11-27T16:20:13.839221402Z","tags":null}}