{"/":{"title":"🪴","content":"\n치즈 나무 지식 걸렸네 🧀🌲\n\n## All notes 📝\n\n- [All notes](/notes/)\n- [All tags](/tags/)\n","lastmodified":"2022-12-01T01:36:37.38580901Z","tags":null},"/notes/%ED%95%98%EB%93%9C%ED%8F%AC%ED%81%AC":{"title":"하드포크","content":"\n- 블록체인 업그레이드 작업\n- 기존 블록체인에서 다른 블로체인으로 넘어갈때 사용하는 방식\n\n## 이유 \n- 기술적 문제 혹은 보안 개선을 위해\n- 새로운 기능을 추가 하기 위해 \n- 거래 반전을 위해","lastmodified":"2022-12-01T01:36:37.38580901Z","tags":null},"/notes/ABI":{"title":"ABI","content":"\n- Contract **A**pplication **B**inary **I**nterface\n- Smart Contract 함수와 파라미터에 대한 Interface 정의 \n- 가지고 있는 정보\n\t- 함수에 대한 **정보** \n\t- 함수에서 사용하는 **인수**\n![](https://static.packt-cdn.com/products/9781789954111/graphics/assets/fe0f2ffc-2f3c-4615-9cb5-43c8e036239b.png)\n- 예시 : https://etherscan.io/address/0xb59f67a8bff5d8cd03f6ac17265c550ed8f33907#code\n```json\n{\n   \"anonymous\":false,\n   \"inputs\":[\n      {\n         \"indexed\":true,\n         \"name\":\"from\",\n         \"type\":\"address\"\n      },\n      {\n         \"indexed\":true,\n         \"name\":\"to\",\n         \"type\":\"address\"\n      },\n      {\n         \"indexed\":false,\n         \"name\":\"value\",\n         \"type\":\"uint256\"\n      }\n   ],\n   \"name\":\"Transfer\",\n   \"type\":\"event\"\n},\n{\n   \"anonymous\":false,\n   \"inputs\":[\n      {\n         \"indexed\":true,\n         \"name\":\"old\",\n         \"type\":\"address\"\n      },\n      {\n         \"indexed\":true,\n         \"name\":\"current\",\n         \"type\":\"address\"\n      }\n   ],\n   \"name\":\"NewOwner\",\n   \"type\":\"event\"\n}\n```\n- `anonymous` : 이 method가 public인지 아닌지 (default: `false`. public 이다.)\n- `type` : 어떤 데이터 타입인지\n\t- `event`\n\t- `inputs` 안에는 input type\n- `name` : item 혹은 파라미터의 이름 \n- `indexed` \n\t- `true` : `topics` 에 저장된다. \n\t- `false` : `data` 필드에 들어간다. \n\n\n## References\n- [Understanding Logs: Deep Dive into eth_getLogs](https://docs.alchemy.com/docs/deep-dive-into-eth_getlogs)\n- [Understanding event logs on the Ethereum blockchain](https://medium.com/mycrypto/understanding-event-logs-on-the-ethereum-blockchain-f4ae7ba50378)","lastmodified":"2022-12-01T01:36:37.38580901Z","tags":null},"/notes/Amazon-Athena":{"title":"Amazon Athena","content":"","lastmodified":"2022-12-01T01:36:37.38580901Z","tags":null},"/notes/Blockchain":{"title":"Blockchain","content":"\n## Blockchain\n-   public database\n-   한 네트워크 내 여러 컴퓨터들을 통해 저장하고, 공유하는 분산형 데이터베이스\n\n## Block\n-   연속성있는 그룹(Blocks)에 저장되는 데이터(data+state)\n-   예를 들어, ETH를 전송했다면, 이 트랜잭션 데이터는 block에 저장됨\n\n## Chain\n-   각 블록은 부모 블록를 참조하고 있다. 즉, 블록들은 연결되어 있음.\n-   블록들은 연결되어 있기 때문에, 블록체인이라고 부름\n\n## Web3\n- 탈중앙화, 블록체인 기술, 토큰 기반 경제학과 같은 개념을 통합한 WWW의 새로운 아이디어\n- Web1 : read-only\n- Web2 : read-write\n- Web3 : read-write-own\n\n## Cryptocurrency\n- 중앙 기관이 아닌 암호를 사용하여 분산 시스템에서 검증 및 유지되는 디지털 통화\n- crypto-currency 혹은 crypto 라고 불린다.\n\n## References\n- [alchemy Web3 Glossary](https://docs.alchemy.com/docs/web3-glossary)\n- ","lastmodified":"2022-12-01T01:36:37.38580901Z","tags":null},"/notes/ERC-1155":{"title":"ERC-1155","content":"","lastmodified":"2022-12-01T01:36:37.38580901Z","tags":null},"/notes/ERC-721":{"title":"ERC-721","content":"","lastmodified":"2022-12-01T01:36:37.38580901Z","tags":null},"/notes/Ethereum":{"title":"Ethereum","content":"\n## Ethereum\n- 컴퓨터가 내장된 블록체인.\n- 비트코인과 다른 점 : 암호화폐로서의 기능 뿐만 아니라 프로그래밍이 가능. 네트워크에서 분산형 애플리케이션을 구축 및 배포할 수 있음.\n- 중앙 주체의 통제 없이 앱과 조직을 구축하고, 자산을 보유하고, 거래하고 소통할 수 있음\n\n## EVM\n- [[notes/Ethereum Virtual Machine]]\n- 글로벌 가상 컴퓨터, 모든 참여자들이 코드 실행을 요청 할 수 있고, 코드 실행은 EVM 상태를 변경시킴\n- [https://ethereum.org/ko/developers/docs/evm](https://ethereum.org/ko/developers/docs/evm)\n\n## Ether\n- ETH : native cryptocurrency of Ethereum\n- 화폐로서 사용되는 암호화폐\n- 거래 요청 확인 및 실행한 컴퓨터에 대한 보상으로 지급됨\n\n## Ethereum Classic\n- 오리지널 이더리움 네트워크 해킹을 해결하기 위해 하드포크 하기 전의 오픈소스 블록체인\n- ETC : 이더리움 클래식의 고유 통화\n\n## Smart contracts\n- 이더리움 블록체인 상에서 실행되는 프로그램\n- 이더리움 블록체인 상의 특정 주소에 있는 코드(function)과 데이터(state)의 모음\n\n### Smart contract 동작 방식\n- 네트워크 상에 미리 결정된 조건이 충족될 때 동작 실행\n\n## Minting Ether\n- 이더리움 원장(Ethereum ledger)에 새로운 이더리움을 발행하는 것\n- underlying Ethereum 만이 새로운 ether를 만들 수 있다.\n\n## Burning Ether\n- 이더리움 원장(Ethereum ledger)에서 이더리움을 삭제하는 것\n\n## Denominations of ether\n- 이더 종파\n- 이더리움에서 적은 금액으로 거래가 자주 일어나, 이를 용이하게 하기 위해 만든 단위\n- \"Wei\"와 \"Gwei\"가 가장 유명하다.\n- [https://ethereum.org/ko/developers/docs/intro-to-ether/#denominations](https://ethereum.org/ko/developers/docs/intro-to-ether/#denominations)\n\n### Wei\n- 이더(ether)의 가장 작은 단위\n- 1 wei = 10^-18 ether = 0.000000000000000001 ether\n- 1 ether = 10^18 wei = 1,000,000,000,000,000,000 wei\n- 주로 기술적 구현단에서 자주 사용됨.\n- 비트코인 탄생에 큰 영향을 준 B-Money를 고안한 인물인 [Wei Dai](https://en.wikipedia.org/wiki/Wei_Dai)의 이름을 따서 만들어졌다.\n\n### Gwei\n- giga-wei. 1,000,000,000 wei\n- Gas 이야기 할 때 많이 사용됨.\n\n## Transferring ether\n- 각 트랜잭션에는 `value` 필드 : 전송할 ether의 양(wei 단위로)\n- sender -\u003e recipient 주소로 옮겨짐\n- recipient 주소가 smart contract라면 smart contract 실행에 대한 gas fee 지불하는데 새용될 수도 있다.\n- [https://ethereum.org/ko/developers/docs/intro-to-ether/#transferring-ether](https://ethereum.org/ko/developers/docs/intro-to-ether/#transferring-ether)\n\n  \n## Ethereum accounts\n- 이더리움에서 거래할 수 있는 ether 잔고를 가지고 있는 entity\n- account은 사용자가 사용하거나 smart contract를 배포할 수 있다.\n\n## Types of Ethereum accounts\n- 1) Externally-owned account (EOA) : priveate key를 가지고 있는 계정\n- 2) Contract account : 네트워크에 배포된 smart contract.\n\n### 1) Externally-owned account (EOA)\n- 만드는데 비용이 들지 않는다.\n- 트랜잭션을 일으킬 수 있다.\n- EOA 사이에서 ETH나 토큰을 전송할 수 있다.\n- public key와 private key 암호화된 키 쌍을 가지고 있다.\n\n### 2) Contract account\n- 생성시 비용이 든다. 네트워크 스토리지를 사용하기 때문에\n- 트랜잭션 수신하는 응답으로만 트랜잭션을 보낼 수 있다. (스스로 트랜잭션을 보낼 수 없다.)\n- 외부에서 contract account로의 전송을 통해 여러 가지 작업할 수 있는 코드를 트리거링 할 수 있다. ex. 토큰 보내기 혹은 새로운 contract 만들기 등\n- private 키가 없다. 대신 code 내 로직에 의해 컨트롤 된다.\n\n\n## Ethereum accounts have four fields\n![](https://ethereum.org/static/19443ab40f108c985fb95b07bac29bcb/302a4/accounts.png)\n - [AN ACCOUNT EXAMINED](https://ethereum.org/ko/developers/docs/accounts/#an-account-examined)\n\n### nonce\n- 각 account에서 보낸 트랜잭션의 수. 트랜잭션 카운터\n- 한 트랜잭션을 한번만 처리할 수 있게 됨. replay attack 방지.\n- account 에서 생성된 contract 갯수.\n\n### balance\n- 주소가 소유한 wei의 수.\n\n### codeHash\n- EVM(이더리움 가상머신) 내 account 코드.\n- 변하지 않는 값. (다른 필드들은 변함)\n- contract account의 경우, contract의 코드를 가리킨다.\n- account가 메세지를 받게되면 코드 실행\n- 코드 조각은 나중에 검색할 수 있도록 해당 해시 아래 상태 데이터베이스(state database)에 포함됨\n- EOA의 경우, 빈 string 해시 값.\n\n### storageRoot\n- storage hash\n- account의 storage content의 해시 값.\n- default는 비어 있음.\n\n## Contract address\n- 42자로 구성된 16진수 주소\n\t- ex. `0x06012c8cf97bead5deae237070f9587f8e7a266d`\n- Contract가 이더리움 블록체인에 배포될 때 부여된다.\n- 만든 사람의 주소와 해당 주소에서 보낸 트랜잭션의 수([nonce](#nonce))를 통해 만들어진다.\n\n## Validator Keys\n- 작업 증명(proof-of-work)에서 지분 증명(proof-of-stake)로 변경되며 필요해짐\n- BLS(Boneh-Lyn-Shacham) 키는 검증인(validator)를 식별하는데 사용 \n- BLS키는 효율적으로 집계하여 네트워크 합의 도달하는데 필요한 대역폭을 줄일 수 있다. \n- private key + public key\n\n## Wallets\n- account != wallet\n- account와 인터렉션 할 수 있는 interface 이자 application\n\n## Querying Ether\n- [[notes/Etherscan]]에서 주소 검색하여 잔액을 확인할 수 있다. \n\n## DApp\n- decentralized application\n- decentralized network 상 위에 smart contract와 front end 인터페이스로 만들어진 어플리케이션. \n\t- smart contract는 접근 가능하며 투명하게 공개된다. \n- 장점\n\t- Zero downtime\n\t\t- 블록체인 네트워크 상에서 운영되기 때문에 \n\t- privacy\n\t- 검열이 따로 없음\n\t- 데이터 무결성\n\t\t- 블록체인에 데이터가 저장되기 때문에 불변이며 위조할 수 없다. \n\t- 검증 가능한 동작 \n\t\t- 별도 중앙 기관 없이 따로 신뢰할 것 없이 사용 가능하다. \n\t\t- 현실 세계에서는  은행 시스템 사용시 금융 기관을 믿고 사용하지만 DApp에서는 그럴 필요가 없다.\n- 단점\n\t- 운영이 어렵다.\n\t\t- 블록체인에 올라가고나면 수정이 어렵다. \n\t- 퍼포먼스 이슈 \n\t\t- 이더리움이 지향하는 보안, 무결성, 투명성, 신뢰성 수준 달성을 위해 모든 노드가 모든 트랜잭션을 실행 및 저장. 증명 합의에도 시간이 걸리게 된다. \n\t- 네트워크 정체\n\t\t- 하나의 DApp이 너무 많은 리소스를 사용하게 되면 전체 네트워크가 정체된다. 현재 네트워크는 초당 10~15개의 트랜잭션만 처리 가능하며, 이보다 더 많은 트랜잭션이 생기면 풀이 빠르게 증가 할 수 있다. \n\t- 사용성\n\t\t- 사용자 역시 블록체인의 보안 방식을 설정해야함으로 진입 장벽이 높을 수 있다.\n\t- 중앙 집중화 \n\t\t- 사용자 친화적으로 하려면 전통적인 중앙 집중화된 서비스로 만들게 되는데, 이렇게 되면 블록체인의 장점들을 더 이상 사용할 수 없게 된다. \n\n## Transaction\n- account의 암호화된 명령\n- 예를 들어, account =\u003e account ETH 전송\n- [EVM](#EVM) 상태를 변경하는 트랜잭션은 전체 네트워크로 브로드캐스트 되어야 한다.\n\t- **recipient** : 수신 주소 \n\t\t- EOA : 전송 받는 사람\n\t\t- Contact account : 이 트랜잭션은 contract code를 실행하는 트랜잭션임. \n\t- **signature** : 보낸 사람 식별자 \n\t\t- 보낸 사람의 private key가 트랜잭션에 싸인하고 보낸 사람이 이 트랜잭션을 승인 했다고 확인 할 때 생성됨. \n\t- **nonce** : 계정의 트랜잭션 번호. 순차적으로 증가하는 카운터\n\t- **value** : 전송하는 ETH 양 ([WEI](#wei))\n\t- **data** : 임의 데이터 (optional)\n\t- **gasLimit** : 트랜잭션에서 사용할 수 있는 최대 가스 단위의 양. 계산 단계에서 나오는 가스 양\n\t- **maxPriorityFeePerGas** : validator에게 보낼 최대 가스량\n\t- **maxFeePerGas** : 거래에 대해 지불할 수 있는 최대 가스량 ( baseFeePerGas 와 maxPriorityFeePerGas 포함)\n\n## Gas\n- 이더리움 네트워크에서 특정 작업을 실행하는데 필요한 계산 노력의 양을 측정하는 단위 \n- 거래를 실행하기 위해 계산 자원 필요 =\u003e 각 거래는 수수료가 필요.\n- 이 거래를 성공적으로 수행하기 위한 필요한 수수료 \n- `gasLimit` 와 `maxPriorityFeePerGas` 를 이용하여 validator에게 줄 최대 거래 수수료를 결정한다. \n\n### 거래 수수료 계산 방법 \n- 이더리움 네트워크 거래 수수료 계산 방식은 [[notes/London upgrade]] 이후로 변경됨.\n- 기존 동작 방식 (런던 업그레이드 전)\n\t- `gasLimit` : 21,000 unit, gas price : 200 gwei 인 경우 =\u003e Gas units * price = 21,000 * 200 = 4,2000,000 gwei (0.0042 ETH)\n- 이후 동작 방식 (런던 업그레이드 이후)\n\t- gasLimit` : 21,000 unit`, **base fee** 10 gwei, tip은 2 gwei \n\t  =\u003e 21,000 ( 10 + 2) = 252,000 gwei (0.000252ETH)\n\t- validator는 0.000042 ETH 팁을 받고, base fee인 0.00021 ETH는 burn 된다.\n\t- `maxFeePerGas` 설정할 수 있다.\n\t\t- refund = 최대 수수료 - ( base fee + priority fee )\n\t- 이를 통해 기본료 이상의 과도한 지불을 막는다.\n\n## Block\n- 이전 블록의 hash가 있는 트랜잭션의 배치 \n- hash는 블록 데이터에서 암호화되어 이 링크로 블록들을 연결 \n\t- 한번 연결된 hash는 모든 이용자가 알고 있기 때문에 쉽게 변조할 수 없다. \n\n### 왜 block이 필요한가\n\n### block 작동 방식 \n\n### Proof-of-stake Protocol \n\n### What's in a block\n- `slot`\n- `proposer_index`\n- `parent_root`\n- `state_root`\n- `body`\n\t- `randao_reveal`\n\t- `eth1_data`\n\t- `graffiti`\n\t- `proposer_slashings`\n\t- `attester_slashings`\n\t- `attestations`\n\t- `deposits`\n\t- `voluntary_exits`\n\t- `sync_aggregate`\n\t- `execution_payload`\n\t- \n\n\n## References\n- Ethereum official website : [https://ethereum.org/ko/what-is-ethereum/](https://ethereum.org/ko/what-is-ethereum/)\n- [Learn Ethereum Blockchain daily and Keep the Knowledge Awake :)](https://medium.com/coinsbench/learn-ethereum-blockchain-daily-and-keep-the-knowledge-awake-day-1-6d482ae67ac7)\n- [Account Abstraction \u0026 ERC 4337](https://medium.com/decipher-media/account-abstraction-erc-4337-2b8dff6b0a34)","lastmodified":"2022-12-01T01:36:37.38580901Z","tags":null},"/notes/Ethereum-Virtual-Machine":{"title":"Ethereum Virtual Machine","content":"\n\n## References\n- [The Ethereum Virtual Machine — How does it work?](https://medium.com/mycrypto/the-ethereum-virtual-machine-how-does-it-work-9abac2b7c9e)","lastmodified":"2022-12-01T01:36:37.38580901Z","tags":null},"/notes/Etherscan":{"title":"Etherscan","content":"\n- [Etherscan](https://etherscan.io/)\n- 웹 어플리케이션으로 address로 [[notes/Ethereum]]의 모든 트랜잭션과 블록을 추적할수 있는 툴\n- 읽는 방법 \n\t- [[notes/How NFT smart contract really work]]\n\n## Transaction Details\n\n\n## Block \n\n## Address\n\n","lastmodified":"2022-12-01T01:36:37.38580901Z","tags":null},"/notes/How-NFT-smart-contract-really-work":{"title":"How NFT smart contract really work","content":"\n\u003e Ethereum NFT 기준\n\n## OpenSea \n\n- 예제 [Doodle #1815](https://opensea.io/assets/ethereum/0x8a90cab2b38dba80c64b7734e58ee1db38b8992e/1815)\n![](https://user-images.githubusercontent.com/2231510/204299525-29388efa-cc3f-4fed-bd2b-9acc83e8d2a5.png\")\n![](https://user-images.githubusercontent.com/2231510/204299525-29388efa-cc3f-4fed-bd2b-9acc83e8d2a5.png)\n\n- OpenSea 주소에서 `chain`, `contract address`, `token` 확인할 수 있다.\n- `https://opensea.io/assets/{chain}/{contract address}/{token id}`\n\n![](https://user-images.githubusercontent.com/2231510/204303462-86a6c32d-033c-4052-ac52-c559d0a2c944.png)\n- Details 에서도 동일하게 NFT에 대해 알 수 있다.\n- Contract Address 링크 : NFT Collection contract [[notes/Etherscan]] 페이지로 연결\n- Token ID 링크 : NFT Token의 metadata \n\n## Etherscan\n- [예제 Contract 0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e](https://etherscan.io/address/0x8a90cab2b38dba80c64b7734e58ee1db38b8992e)\n\n### \"Contract\" tab\n- Code\n\t- Contract Source Code : solidity. contract code 내용\n\t- Contract ABI \n\t- Contract Creation Code\n\t\t- ByteCode\n\t\t- Opcodes\n- Read Contract : 해당 스마트 컨트렉트에 대해 READ 할수 있는 function들 \n\t- 예를 들어, `onwnerOf`  function에 `tokenId`를 넣으면 해당 `tokenId`의 NFT를 가진 owner query 가능\n\t  ![](https://user-images.githubusercontent.com/2231510/204311713-6f1ea517-9144-43bc-9add-3e39f0ce9386.png)\n\t- `tokenURI` : NFT metadata link \n\t  ![](https://user-images.githubusercontent.com/2231510/204314326-005287a8-b0f2-43d6-a94a-dd5b8c4bac92.png)\n\t  - [[notes/IPFS]] 주소\n\t  - `https://ipfs.io/ipfs/{뒤쪽 주소}` \n\t\t  - 앞부분은 바뀌지 않고 맨 뒤 token ID만 변경된다. \n\t  - [https://ipfs.io/ipfs/QmPMc4tcBsMqLRuCQtPmPe84bpSjrC3Ky7t3JWuHXYB4aS/13](https://ipfs.io/ipfs/QmPMc4tcBsMqLRuCQtPmPe84bpSjrC3Ky7t3JWuHXYB4aS/13)\n\t  - 이렇게 다른 곳에 저장되어있기 때문에 **owner**가 원하면 metada를 바꿀 수 있다.\n\t  - owner를 만약 resign(이 역시도 function) 한다면 owner가 없게 되고 해당 NFT는 영원히 바꿀 수 없게 된다. \n\t- `balanceOf` : owner 주소가 해당 contract NFT 를 몇개 가졌는지 \n\t  ![](https://user-images.githubusercontent.com/2231510/204318782-5f27a4cd-4f0d-42ff-92cc-04e2d2cdf3d7.png)\n\t- `totalSupply` : 이 contract의 최대 발행갯수 \n\t  ![](https://user-images.githubusercontent.com/2231510/204319392-9b9c2e31-1b97-43f7-8a67-ee509a4594a2.png)\n\t  \n- Write code \n\t- 지갑과 연결하여 code를 실행시킬 수 있다. \n\t- `setBaseURI` : Metadata URL 세팅하기 \n\t  ![](https://user-images.githubusercontent.com/2231510/204317487-52539b7e-2fe6-444f-b450-f93f8cd83604.png)\n\t  (내가 `owner`가 아니기 때문에 denied 됨)\n\t  ![](https://user-images.githubusercontent.com/2231510/204317791-d5d95e9d-1074-453d-b198-e8f78f78c8d6.png)\n\t  (코드 보면 `onlyOwner` contract owner 만 가능하게 되어있음 )\n\t  나중에 metadata가 호오오옥시나 바뀌게 되면 이 `setBaseURI`로 변경할 수 있음. \n\t  - `withdraw` : `onlyOwner`\n\t    해당 contract의 balance를 해당 function call 한 사람에게 transfer 한다. (누구든 부를 수 있긴 하지만 `onlyOwner`에서 막히니 owner만이 balance를 가져갈 수 있다.)\n\t    ![](https://user-images.githubusercontent.com/2231510/204320002-9f55dc99-5744-4f15-ac68-8cc8d5480336.png)\n\t    \n## NFT Staking\n- [예시 Wizards \u0026 Dragons Game (WnD)](https://opensea.io/collection/wizards-dragons-game-v2)\n- [Contract Etherscan](https://etherscan.io/address/0x999e88075692bcee3dbc07e7e64cd32f39a1d3ab#readContract)\n- `Contract` tab \u003e `Read Contract` \u003e `tower` 다른 contract 주소가 있음\n  ![](https://user-images.githubusercontent.com/2231510/204322362-d41719e9-015d-403f-91e0-8bc9986dfd42.png)\n  staking contract \n  ![](https://user-images.githubusercontent.com/2231510/204323453-a5c3738a-c8d6-45cd-a02b-40523d298f07.png)\n  `transferFrom` : [[notes/erc-20]] standard function\n\t  - `tokenOwner` 로 부터 이 `address` 에게 NFT를 보내겠다. \n- unstaking\n  ![](https://user-images.githubusercontent.com/2231510/204324932-81b03754-0647-4039-9982-b511ff4bca45.png)\n  \"claim\", \"unstaking\" function을 보면 대부분 여기에 reward에 대한 코드가 있다. \n\n\n## References\n- [HOW NFT SMART CONTRACTS REALLY WORK - Can metadata be changed? How staking works?](https://www.youtube.com/watch?v=Wu436_IwWmo)","lastmodified":"2022-12-01T01:36:37.38580901Z","tags":null},"/notes/IPFS":{"title":"IPFS","content":"- [ipfs.tech](https://ipfs.tech/)\n- InterPlanetary File System. \n- 분산형 파일 시스템.\n- P2P 방식. \n- NFT Metadata 저장하는 곳으로 많이 쓰임. \n\t- 다른 서비스로는  [[arweave.org]] 도 있음.","lastmodified":"2022-12-01T01:36:37.38580901Z","tags":null},"/notes/Logstash":{"title":"Logstash","content":"\n## Configuration\n\n```yaml\ninput {\n  beats {\n    port =\u003e 5044\n  }\n}\n\nfilter{\n}\n\noutput {\n  s3 {\n    region =\u003e \"us-east-1\"\n    bucket =\u003e \"log-bucket\"\n    prefix =\u003e \"%{+YYYY}/%{+MM}/%{+dd}\"\n    codec =\u003e line { format =\u003e \"%{message}\"}\n  }\n}\n\n```\n\n## Input\n### filebeat\n\n### file\n\n\n## Filter\n\n## Output\n### S3\n- ``\n\n## References \n- [Using Logstash to Send Directly to an S3 Object Store](https://joshua-robinson.medium.com/using-logstash-to-send-directly-to-an-s3-object-store-34a4365a0960)","lastmodified":"2022-12-01T01:36:37.38580901Z","tags":null},"/notes/London-upgrade":{"title":"London Upgrade","content":"\n- 런던 [[notes/하드포크]]\n- 2021년 8월 5일 \n- 수수료 구조 개선 및 공급량 조절 등 \n\n## EIP-1559\n- 가스비를 줄이기 위한 새로운 수수료 구조 도입 (수수료 절감)\n- 런던 업그레이드의 핵심 내용\n- 문제점\n\t- 더 높은 수수료를 제시하는 거래가 더 빠르게 이루어지는 구조. 이로 인해 가스비 경쟁이 과열 =\u003e 일부 거래가 지나치게 높은 수수료를 지불하게 됨.\n\t- 사용자가 직접 계산 해야 함 =\u003e 과도하게 비싸게 지출할 수도 있음\n- 개선\n\t- 자동으로 계산된 기본 수수료로 지불 \n\n## EIP-3554\n- 이더리움 채굴 난이도 폭탄을 12월 1일로 연기\n- 난이도 폭탄 : 이더리움 플랫폼에 기본적 내장된 코드로, 채굴 난이도를 높이는 코드이다. \n\t- 난이도가 높아지면 자연스럽게 작업증명(PoW)의 수요가 줄어들며, 지분증명(PoS)의 수요가 높아진다.\n\t- 즉, 채굴 방식 변경을 위한 코드다. 작업증명(PoW) → 지분증명(PoS)\n\n## EIP-3198 \n- 기본료에 대응하는 연산부호 도입(Basefee opcode)\n\n## EIP-3529 \n- 가스비 환불 기능 제거 (블록 크기에 유연성을 두는 EIP-15999를 방해하는 기능을 없애자는 차원\n\n## EIP-3541 \n- 0xEF 바이트로 시작하는 새 콘트랙트 생성 거부\n- EIP(Ethereum Improvement Proposal) : 이더리움 개선 제안","lastmodified":"2022-12-01T01:36:37.38580901Z","tags":null},"/notes/Redash":{"title":"Redash","content":"\n## 지원 데이터 소스 \n- Amazon 계열 : Athena, CloudWatch, DynamoDB, Redshift\n- Google 계열 : Analytics, BigQuery, Spreadsheets\n- Microsoft Azure 계열 : Data Warehouse / Synapse, SQL Database, SQL Server\n- Cassandra\n- Clickhouse\n- CockroachDB\n- CSV (self-hosted에서는 지원하지 않음)\n- MongoDB\n- PostgresQL\n- [Supported Data Sources](https://redash.io/help/data-sources/querying/supported-data-sources)\n\n## Queries\n- \n\n## Dashboards\n- \n\n## Alerts\n\n\n## References\n- [Creating and Editing Queries](https://redash.io/help/user-guide/querying/writing-queries)","lastmodified":"2022-12-01T01:36:37.38580901Z","tags":null},"/notes/Uncle-Block":{"title":"Uncle Block","content":"\n## References \nhttps://docs.alchemy.com/docs/what-are-uncle-blocks","lastmodified":"2022-12-01T01:36:37.38580901Z","tags":null},"/notes/arweave.org":{"title":"arweave.org","content":"\n- [www.arweave.org](https://www.arweave.org/)\n- ","lastmodified":"2022-12-01T01:36:37.38580901Z","tags":null},"/notes/atomic-swap":{"title":"Atomic swap","content":"\n- 중앙화된 거래소를 거치지않고 서로 다른 코인을 직접 교환하는 것\n- full name : atomic cross chain trading\n- 코인 스왑(coin swap) 혹은 에어스왑(airswap)이라고도 한다. ","lastmodified":"2022-12-01T01:36:37.38580901Z","tags":null},"/notes/erc-20":{"title":"ERC-20","content":"- [ERC-20 Token Standard](https://ethereum.org/en/developers/docs/standards/tokens/erc-20/)","lastmodified":"2022-12-01T01:36:37.38580901Z","tags":null},"/notes/hello":{"title":"hello","content":"- [https://beta.sayhello.so/](https://beta.sayhello.so/)\n- The search engine for instant answers\n- 질문에 대해 바로 대답(answer)를 보여주고 써먹을 수 있는 코드 조각을 바로 보여주는 개발자 친화 검색 엔진 \n\n![](https://user-images.githubusercontent.com/2231510/204835776-eae19bc0-3a41-44c9-bed5-03ddbd0d51fd.png)\n\n\n## How to best use Hello\n- 자연어 검색어 지원. \n- `How to~` `What is~` 와 같이 검색하기\n- \"check if string is a palindrome\" =\u003e \"how to check if string is a palindrome in javascript\"\n- 질문 형식으로 검색하기 \n\t- \"rust\" =\u003e \"what is rust?\"\n\n## VSCode Extension\n\n![](https://hello-code-snippets-vscode-extension-assets-public.s3.amazonaws.com/demo.png)\n\n- [Hello Code Snippets](https://marketplace.visualstudio.com/items?itemName=HelloCognition.hello-code-snippets)\n","lastmodified":"2022-12-01T01:36:37.38580901Z","tags":null}}