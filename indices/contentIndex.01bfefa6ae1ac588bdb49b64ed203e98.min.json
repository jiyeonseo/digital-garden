{"/":{"title":"🪴","content":"\n기록을 합니다.\n\n","lastmodified":"2022-11-28T16:40:16.885995255Z","tags":null},"/notes/Blockchain":{"title":"Blockchain","content":"\n## Blockchain\n-   public database\n-   한 네트워크 내 여러 컴퓨터들을 통해 저장하고, 공유하는 분산형 데이터베이스\n\n## Block\n-   연속성있는 그룹(Blocks)에 저장되는 데이터(data+state)\n-   예를 들어, ETH를 전송했다면, 이 트랜잭션 데이터는 block에 저장됨\n\n## Chain\n-   각 블록은 부모 블록를 참조하고 있다. 즉, 블록들은 연결되어 있음.\n-   블록들은 연결되어 있기 때문에, 블록체인이라고 부름\n\n## Web3\n- 탈중앙화, 블록체인 기술, 토큰 기반 경제학과 같은 개념을 통합한 WWW의 새로운 아이디어\n- Web1 : read-only\n- Web2 : read-write\n- Web3 : read-write-own\n\n## Cryptocurrency\n- 중앙 기관이 아닌 암호를 사용하여 분산 시스템에서 검증 및 유지되는 디지털 통화\n- crypto-currency 혹은 crypto 라고 불린다.\n","lastmodified":"2022-11-28T16:40:16.885995255Z","tags":null},"/notes/Ethereum":{"title":"Ethereum","content":"\n## Ethereum\n- 컴퓨터가 내장된 블록체인.\n- 비트코인과 다른 점 : 암호화폐로서의 기능 뿐만 아니라 프로그래밍이 가능. 네트워크에서 분산형 애플리케이션을 구축 및 배포할 수 있음.\n- 중앙 주체의 통제 없이 앱과 조직을 구축하고, 자산을 보유하고, 거래하고 소통할 수 있음\n\n## EVM\n- Ethereum Virtual Machine\n- 글로벌 가상 컴퓨터, 모든 참여자들이 코드 실행을 요청 할 수 있고, 코드 실행은 EVM 상태를 변경시킴\n- [https://ethereum.org/ko/developers/docs/evm](https://ethereum.org/ko/developers/docs/evm)\n\n## Ether\n- ETH : native cryptocurrency of Ethereum\n- 화폐로서 사용되는 암호화폐\n- 거래 요청 확인 및 실행한 컴퓨터에 대한 보상으로 지급됨\n\n## Ethereum Classic\n- 오리지널 이더리움 네트워크 해킹을 해결하기 위해 하드포크 하기 전의 오픈소스 블록체인\n- ETC : 이더리움 클래식의 고유 통화\n\n## Smart contracts\n- 이더리움 블록체인 상에서 실행되는 프로그램\n- 이더리움 블록체인 상의 특정 주소에 있는 코드(function)과 데이터(state)의 모음\n\n### Smart contract 동작 방식\n- 네트워크 상에 미리 결정된 조건이 충족될 때 동작 실행\n\n## Minting Ether\n- 이더리움 원장(Ethereum ledger)에 새로운 이더리움을 발행하는 것\n- underlying Ethereum 만이 새로운 ether를 만들 수 있다.\n\n## Burning Ether\n- 이더리움 원장(Ethereum ledger)에서 이더리움을 삭제하는 것\n\n## Denominations of ether\n- 이더 종파\n- 이더리움에서 적은 금액으로 거래가 자주 일어나, 이를 용이하게 하기 위해 만든 단위\n- \"Wei\"와 \"Gwei\"가 가장 유명하다.\n- [https://ethereum.org/ko/developers/docs/intro-to-ether/#denominations](https://ethereum.org/ko/developers/docs/intro-to-ether/#denominations)\n\n### Wei\n- 이더(ether)의 가장 작은 단위\n- 1 wei = 10^-18 ether = 0.000000000000000001 ether\n- 1 ether = 10^18 wei = 1,000,000,000,000,000,000 wei\n- 주로 기술적 구현단에서 자주 사용됨.\n- 비트코인 탄생에 큰 영향을 준 B-Money를 고안한 인물인 [Wei Dai](https://en.wikipedia.org/wiki/Wei_Dai)의 이름을 따서 만들어졌다.\n\n### Gwei\n- giga-wei. 1,000,000,000 wei\n- Gas 이야기 할 때 많이 사용됨.\n\n## Transferring ether\n- 각 트랜잭션에는 `value` 필드 : 전송할 ether의 양(wei 단위로)\n- sender -\u003e recipient 주소로 옮겨짐\n- recipient 주소가 smart contract라면 smart contract 실행에 대한 gas fee 지불하는데 새용될 수도 있다.\n- [https://ethereum.org/ko/developers/docs/intro-to-ether/#transferring-ether](https://ethereum.org/ko/developers/docs/intro-to-ether/#transferring-ether)\n\n  \n## Ethereum accounts\n- 이더리움에서 거래할 수 있는 ether 잔고를 가지고 있는 entity\n- account은 사용자가 사용하거나 smart contract를 배포할 수 있다.\n\n## Types of Ethereum accounts\n- 1) Externally-owned account (EOA) : priveate key를 가지고 있는 계정\n- 2) Contract account : 네트워크에 배포된 smart contract.\n\n### 1) Externally-owned account (EOA)\n- 만드는데 비용이 들지 않는다.\n- 트랜잭션을 일으킬 수 있다.\n- EOA 사이에서 ETH나 토큰을 전송할 수 있다.\n- public key와 private key 암호화된 키 쌍을 가지고 있다.\n\n### 2) Contract account\n- 생성시 비용이 든다. 네트워크 스토리지를 사용하기 때문에\n- 트랜잭션 수신하는 응답으로만 트랜잭션을 보낼 수 있다. (스스로 트랜잭션을 보낼 수 없다.)\n- 외부에서 contract account로의 전송을 통해 여러 가지 작업할 수 있는 코드를 트리거링 할 수 있다. ex. 토큰 보내기 혹은 새로운 contract 만들기 등\n- private 키가 없다. 대신 code 내 로직에 의해 컨트롤 된다.\n\n\n## Ethereum accounts have four fields\n![](https://ethereum.org/static/19443ab40f108c985fb95b07bac29bcb/302a4/accounts.png)\n - [AN ACCOUNT EXAMINED](https://ethereum.org/ko/developers/docs/accounts/#an-account-examined)\n\n### nonce\n- 각 account에서 보낸 트랜잭션의 수. 트랜잭션 카운터\n- 한 트랜잭션을 한번만 처리할 수 있게 됨. replay attack 방지.\n- account 에서 생성된 contract 갯수.\n\n### balance\n- 주소가 소유한 wei의 수.\n\n### codeHash\n- EVM(이더리움 가상머신) 내 account 코드.\n- 변하지 않는 값. (다른 필드들은 변함)\n- contract account의 경우, contract의 코드를 가리킨다.\n- account가 메세지를 받게되면 코드 실행\n- 코드 조각은 나중에 검색할 수 있도록 해당 해시 아래 상태 데이터베이스(state database)에 포함됨\n- EOA의 경우, 빈 string 해시 값.\n\n### storageRoot\n- storage hash\n- account의 storage content의 해시 값.\n- default는 비어 있음.\n\n## Contract address\n- 42자로 구성된 16진수 주소\n\t- ex. `0x06012c8cf97bead5deae237070f9587f8e7a266d`\n- Contract가 이더리움 블록체인에 배포될 때 부여된다.\n- 만든 사람의 주소와 해당 주소에서 보낸 트랜잭션의 수([nonce](#nonce))를 통해 만들어진다.\n\n## Validator Keys\n- 작업 증명(proof-of-work)에서 지분 증명(proof-of-stake)로 변경되며 필요해짐\n- BLS(Boneh-Lyn-Shacham) 키는 검증인(validator)를 식별하는데 사용 \n- BLS키는 효율적으로 집계하여 네트워크 합의 도달하는데 필요한 대역폭을 줄일 수 있다. \n- private key + public key\n\n## Wallets\n- account != wallet\n- account와 인터렉션 할 수 있는 interface 이자 application\n\n## Querying Ether\n- [[Etherscan]] 에서 주소 검색하여 잔액을 확인할 수 있다. \n\n## DApp\n- decentralized application\n- decentralized network 상 위에 smart contract와 front end 인터페이스로 만들어진 어플리케이션. \n\t- smart contract는 접근 가능하며 투명하게 공개된다. \n- 장점\n\t- Zero downtime\n\t\t- 블록체인 네트워크 상에서 운영되기 때문에 \n\t- privacy\n\t- 검열이 따로 없음\n\t- 데이터 무결성\n\t\t- 블록체인에 데이터가 저장되기 때문에 불변이며 위조할 수 없다. \n\t- 검증 가능한 동작 \n\t\t- 별도 중앙 기관 없이 따로 신뢰할 것 없이 사용 가능하다. \n\t\t- 현실 세계에서는  은행 시스템 사용시 금융 기관을 믿고 사용하지만 DApp에서는 그럴 필요가 없다.\n- 단점\n\t- 운영이 어렵다.\n\t\t- 블록체인에 올라가고나면 수정이 어렵다. \n\t- 퍼포먼스 이슈 \n\t\t- 이더리움이 지향하는 보안, 무결성, 투명성, 신뢰성 수준 달성을 위해 모든 노드가 모든 트랜잭션을 실행 및 저장. 증명 합의에도 시간이 걸리게 된다. \n\t- 네트워크 정체\n\t\t- 하나의 DApp이 너무 많은 리소스를 사용하게 되면 전체 네트워크가 정체된다. 현재 네트워크는 초당 10~15개의 트랜잭션만 처리 가능하며, 이보다 더 많은 트랜잭션이 생기면 풀이 빠르게 증가 할 수 있다. \n\t- 사용성\n\t\t- 사용자 역시 블록체인의 보안 방식을 설정해야함으로 진입 장벽이 높을 수 있다.\n\t- 중앙 집중화 \n\t\t- 사용자 친화적으로 하려면 전통적인 중앙 집중화된 서비스로 만들게 되는데, 이렇게 되면 블록체인의 장점들을 더 이상 사용할 수 없게 된다. \n\n## Transaction\n- account의 암호화된 명령\n- 예를 들어, account =\u003e account ETH 전송\n- [EVM](#EVM) 상태를 변경하는 트랜잭션은 전체 네트워크로 브로드캐스트 되어야 한다.\n\t- **recipient** : 수신 주소 \n\t\t- EOA : 전송 받는 사람\n\t\t- Contact account : 이 트랜잭션은 contract code를 실행하는 트랜잭션임. \n\t- **signature** : 보낸 사람 식별자 \n\t\t- 보낸 사람의 private key가 트랜잭션에 싸인하고 보낸 사람이 이 트랜잭션을 승인 했다고 확인 할 때 생성됨. \n\t- **nonce** : 계정의 트랜잭션 번호. 순차적으로 증가하는 카운터\n\t- **value** : 전송하는 ETH 양 ([WEI](#wei))\n\t- **data** : 임의 데이터 (optional)\n\t- **gasLimit** : 트랜잭션에서 사용할 수 있는 최대 가스 단위의 양. 계산 단계에서 나오는 가스 양\n\t- **maxPriorityFeePerGas** : validator에게 보낼 최대 가스량\n\t- **maxFeePerGas** : 거래에 대해 지불할 수 있는 최대 가스량 ( baseFeePerGas 와 maxPriorityFeePerGas 포함)\n\n## Gas\n\n\n\n\n## References\n- Ethereum official website : [https://ethereum.org/ko/what-is-ethereum/](https://ethereum.org/ko/what-is-ethereum/)\n- [Learn Ethereum Blockchain daily and Keep the Knowledge Awake :)](https://medium.com/coinsbench/learn-ethereum-blockchain-daily-and-keep-the-knowledge-awake-day-1-6d482ae67ac7)\n- [Account Abstraction \u0026 ERC 4337](https://medium.com/decipher-media/account-abstraction-erc-4337-2b8dff6b0a34)","lastmodified":"2022-11-28T16:40:16.885995255Z","tags":null},"/notes/Etherscan":{"title":"Etherscan","content":"\n- [Etherscan](https://etherscan.io/)\n- 웹 어플리케이션으로 address로 [[Ethereum]]의 모든 트랜잭션과 블록을 추적할수 있는 툴\n- 사용 방법 \n\t- [[How NFT smart contract really work]]\n","lastmodified":"2022-11-28T16:40:16.885995255Z","tags":null},"/notes/How-NFT-smart-contract-really-work":{"title":"How NFT smart contract really work","content":"\n\u003e Ethereum NFT 기준\n\n## OpenSea \n\n- 예제 [Doodle #1815](https://opensea.io/assets/ethereum/0x8a90cab2b38dba80c64b7734e58ee1db38b8992e/1815)\n![](https://user-images.githubusercontent.com/2231510/204299525-29388efa-cc3f-4fed-bd2b-9acc83e8d2a5.png\")\n![](https://user-images.githubusercontent.com/2231510/204299525-29388efa-cc3f-4fed-bd2b-9acc83e8d2a5.png)\n\n- OpenSea 주소에서 `chain`, `contract address`, `token` 확인할 수 있다.\n- `https://opensea.io/assets/{chain}/{contract address}/{token id}`\n\n![](https://user-images.githubusercontent.com/2231510/204303462-86a6c32d-033c-4052-ac52-c559d0a2c944.png)\n- Details 에서도 동일하게 NFT에 대해 알 수 있다.\n- Contract Address 링크 : NFT Collection contract [[Etherscan]] 페이지로 연결\n- Token ID 링크 : NFT Token의 metadata \n\n## Etherscan\n- [예제 Contract 0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e](https://etherscan.io/address/0x8a90cab2b38dba80c64b7734e58ee1db38b8992e)\n\n### \"Contract\" tab\n- Code\n\t- Contract Source Code : solidity. contract code 내용\n\t- Contract ABI \n\t- Contract Creation Code\n\t\t- ByteCode\n\t\t- Opcodes\n- Read Contract : 해당 스마트 컨트렉트에 대해 READ 할수 있는 function들 \n\t- 예를 들어, `onwnerOf`  function에 `tokenId`를 넣으면 해당 `tokenId`의 NFT를 가진 owner query 가능\n\t  ![](https://user-images.githubusercontent.com/2231510/204311713-6f1ea517-9144-43bc-9add-3e39f0ce9386.png)\n\t- `tokenURI` : NFT metadata link \n\t  ![](https://user-images.githubusercontent.com/2231510/204314326-005287a8-b0f2-43d6-a94a-dd5b8c4bac92.png)\n\t  - [[IPFS]] 주소\n\t  - `https://ipfs.io/ipfs/{뒤쪽 주소}` \n\t\t  - 앞부분은 바뀌지 않고 맨 뒤 token ID만 변경된다. \n\t  - [https://ipfs.io/ipfs/QmPMc4tcBsMqLRuCQtPmPe84bpSjrC3Ky7t3JWuHXYB4aS/13](https://ipfs.io/ipfs/QmPMc4tcBsMqLRuCQtPmPe84bpSjrC3Ky7t3JWuHXYB4aS/13)\n\t  - 이렇게 다른 곳에 저장되어있기 때문에 **owner**가 원하면 metada를 바꿀 수 있다.\n\t  - owner를 만약 resign(이 역시도 function) 한다면 owner가 없게 되고 해당 NFT는 영원히 바꿀 수 없게 된다. \n\t- `balanceOf` : owner 주소가 해당 contract NFT 를 몇개 가졌는지 \n\t  ![](https://user-images.githubusercontent.com/2231510/204318782-5f27a4cd-4f0d-42ff-92cc-04e2d2cdf3d7.png)\n\t- `totalSupply` : 이 contract의 최대 발행갯수 \n\t  ![](https://user-images.githubusercontent.com/2231510/204319392-9b9c2e31-1b97-43f7-8a67-ee509a4594a2.png)\n\t  \n- Write code \n\t- 지갑과 연결하여 code를 실행시킬 수 있다. \n\t- `setBaseURI` : Metadata URL 세팅하기 \n\t  ![](https://user-images.githubusercontent.com/2231510/204317487-52539b7e-2fe6-444f-b450-f93f8cd83604.png)\n\t  (내가 `owner`가 아니기 때문에 denied 됨)\n\t  ![](https://user-images.githubusercontent.com/2231510/204317791-d5d95e9d-1074-453d-b198-e8f78f78c8d6.png)\n\t  (코드 보면 `onlyOwner` contract owner 만 가능하게 되어있음 )\n\t  나중에 metadata가 호오오옥시나 바뀌게 되면 이 `setBaseURI`로 변경할 수 있음. \n\t  - `withdraw` : `onlyOwner`\n\t    해당 contract의 balance를 해당 function call 한 사람에게 transfer 한다. (누구든 부를 수 있긴 하지만 `onlyOwner`에서 막히니 owner만이 balance를 가져갈 수 있다.)\n\t    ![](https://user-images.githubusercontent.com/2231510/204320002-9f55dc99-5744-4f15-ac68-8cc8d5480336.png)\n\t    \n## NFT Staking\n- [예시 Wizards \u0026 Dragons Game (WnD)](https://opensea.io/collection/wizards-dragons-game-v2)\n- [Contract Etherscan](https://etherscan.io/address/0x999e88075692bcee3dbc07e7e64cd32f39a1d3ab#readContract)\n- `Contract` tab \u003e `Read Contract` \u003e `tower` 다른 contract 주소가 있음\n  ![](https://user-images.githubusercontent.com/2231510/204322362-d41719e9-015d-403f-91e0-8bc9986dfd42.png)\n  staking contract \n  ![](https://user-images.githubusercontent.com/2231510/204323453-a5c3738a-c8d6-45cd-a02b-40523d298f07.png)\n  `transferFrom` : [[erc-20]] standard function\n\t  - `tokenOwner` 로 부터 이 `address` 에게 NFT를 보내겠다. \n- unstaking\n  ![](https://user-images.githubusercontent.com/2231510/204324932-81b03754-0647-4039-9982-b511ff4bca45.png)\n  \"claim\", \"unstaking\" function을 보면 대부분 여기에 reward에 대한 코드가 있다. \n\n\n## References\n- [HOW NFT SMART CONTRACTS REALLY WORK - Can metadata be changed? How staking works?](https://www.youtube.com/watch?v=Wu436_IwWmo)","lastmodified":"2022-11-28T16:40:16.885995255Z","tags":null},"/notes/IPFS":{"title":"IPFS","content":"- [ipfs.tech](https://ipfs.tech/)\n- InterPlanetary File System. \n- 분산형 파일 시스템.\n- P2P 방식. \n- NFT Metadata 저장하는 곳으로 많이 쓰임. \n\t- 다른 서비스로는  [[arweave.org]] 도 있음.","lastmodified":"2022-11-28T16:40:16.885995255Z","tags":null},"/notes/Logstash":{"title":"Logstash","content":"\n## Configuration\n\n```yaml\ninput {\n  beats {\n    port =\u003e 5044\n  }\n}\n\nfilter{\n}\n\noutput {\n  s3 {\n    region =\u003e \"us-east-1\"\n    bucket =\u003e \"log-bucket\"\n    prefix =\u003e \"%{+YYYY}/%{+MM}/%{+dd}\"\n    codec =\u003e line { format =\u003e \"%{message}\"}\n  }\n}\n\n```\n\n## Input\n### filebeat\n\n### file\n\n\n## Filter\n\n## Output\n### S3\n- ``\n\n## References \n- [Using Logstash to Send Directly to an S3 Object Store](https://joshua-robinson.medium.com/using-logstash-to-send-directly-to-an-s3-object-store-34a4365a0960)","lastmodified":"2022-11-28T16:40:16.885995255Z","tags":null},"/notes/arweave.org":{"title":"arweave.org","content":"\n- [www.arweave.org](https://www.arweave.org/)\n- ","lastmodified":"2022-11-28T16:40:16.885995255Z","tags":null},"/notes/erc-20":{"title":"ERC-20","content":"- [ERC-20 Token Standard](https://ethereum.org/en/developers/docs/standards/tokens/erc-20/)","lastmodified":"2022-11-28T16:40:16.885995255Z","tags":null},"/tags/setup":{"title":"Setup","content":"\n## Making your own Quartz\nSetting up Quartz requires a basic understanding of `git`. If you are unfamiliar, [this resource](https://resources.nwplus.io/2-beginner/how-to-git-github.html) is a great place to start!\n\n### Forking\n\u003e A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\n\nNavigate to the GitHub repository for the Quartz project:\n\n📁 [Quartz Repository](https://github.com/jackyzha0/quartz)\n\nThen, Fork the repository into your own GitHub account. If you don't have an account, you can make on for free [here](https://github.com/join). More details about forking a repo can be found on [GitHub's documentation](https://docs.github.com/en/get-started/quickstart/fork-a-repo).\n\n### Cloning\nAfter you've made a fork of the repository, you need to download the files locally onto your machine. Ensure you have `git`, then type the following command replacing `YOUR-USERNAME` with your GitHub username.\n\n```shell\ngit clone https://github.com/YOUR-USERNAME/quartz\n```\n\n## Editing\nGreat! Now you have everything you need to start editing and growing your digital garden. If you're ready to start writing content already, check out the recommended flow for editing notes in Quartz.\n\n\u003e ✏️ Step 2: [Editing Notes in Quartz](notes/editing.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).","lastmodified":"2022-11-28T16:40:16.885995255Z","tags":null}}