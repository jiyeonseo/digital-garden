<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>backend on</title><link>https://jiyeonseo.github.io/digital-garden/tags/backend/</link><description>Recent content in backend on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jiyeonseo.github.io/digital-garden/tags/backend/index.xml" rel="self" type="application/rss+xml"/><item><title>백엔드 통신 패턴</title><link>https://jiyeonseo.github.io/digital-garden/notes/backend-communication-design-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jiyeonseo.github.io/digital-garden/notes/backend-communication-design-patterns/</guid><description>백엔드 통신 디자인 패턴 Pattern 1. 요청-응답 패턴 마치 클라이언트-백엔드처럼 핑퐁 동기 통신 요청하고 기다렸다가 응답이 오면 그 다음 수행 예) RESTful API : 특정 endpoint(URL)로 GET, POST, PUT, DELETE 와 같은 http 요청을 하여 필요한 데이터를 응답값으로 받아 처리 요청-응답 패턴 장점 단순하고 구현이 용이하여 가장 많이 사용되는 패턴 여러 상황에 대부분 다 적합한 편 확장성 : 각 요청이 개별적이기 때문에 단순하게 여러 요청을 처리하기 쉬움 신뢰성 : 항상 요청은 응답을 보내야 함으로, 제대로 이루어 지지 않은 경우 이를 모니터링 하기 용이함.</description></item></channel></rss>